module.exports = obfuscate;

// from "a" to "z" and from "A" to "Z"
const charsRange = generateChars([[97, 122], [65, 90]]);
const charsRangeLength = charsRange.length;

/**
 * Obfuscate classnames to shortest version
 *
 * @param {Array} classes - array of classes to obfuscation
 * @returns {Object} - Mapping between original classname and obfuscated version
 */
function obfuscate(classes) {
    if (!Array.isArray(classes)) {
        throw new Error(`You passed non-array value: ${classes}`);
    }

    const classesMap = {};
    let classIndex = 0;

    for (let i = 0, ii = classes.length; i < ii; i++) {
        classesMap[classes[i]] = (classesMap[classes[i]] || 0) + 1;
    }

    const sortedByUsageClasses = Object.keys(classesMap).sort((a, b) => {
        return classesMap[b] - classesMap[a];
    });

    for (let j = 0, jj = sortedByUsageClasses.length; j < jj; j++) {
        const baseCharsRange = decToOwnBaseNotation(classIndex, charsRangeLength);
        let baseCharsRangeIndex = baseCharsRange.length - 1;
        let shortClassname = '';

        while (baseCharsRangeIndex >= 0) {
            shortClassname = charsRange[baseCharsRange[baseCharsRangeIndex]] + shortClassname;
            baseCharsRangeIndex--;
        }

        classesMap[sortedByUsageClasses[j]] = shortClassname;
        classIndex++;
    }

    return classesMap;
}

/**
 * Generate array of
 * @param {Array} codes - array of ranges by which will be generated list of characters. Example [[97, 122]] - a...z
 * @returns {Array} - characters generated by passed char codes
 */
function generateChars(codes) {
    const results = [];

    for (let i = 0, ii = codes.length; i < ii; i++) {
        for (let j = codes[i][0]; j <= codes[i][1]; j++) {
            results.push(String.fromCharCode(j));
        }
    }

    return results;
}

/**
 * Convert decimal number to notation with custom base
 *
 * @param { Number } dec - Number in decimal notation
 * @param { Number } base - Base of new notation
 * @returns {Array} - Result of converting from dec to base notation
 */
function decToOwnBaseNotation(dec, base) {
    let result = [];
    let quotient = dec;
    let remainder;

    do {
        remainder = quotient % base;
        quotient = Math.floor(quotient / base);
        result.unshift(remainder);
    } while (quotient > 0);

    return result;
}
